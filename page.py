# Form implementation generated from reading ui file 'Colizeum Tool - untitled.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import telebot
import datetime
import sqlite3
import configparser
import os, time
import hashlib

from PyQt6.QtCore import QTimer
from PyQt6 import QtCore, QtWidgets
from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QLineEdit
import sys
from PyQt6 import QtCore, QtGui, QtWidgets




############
##Database##
############

users_db = sqlite3.connect('users.db')
conn = sqlite3.connect('CIS_admin_helper.db')
usr = users_db.cursor()
cur = conn.cursor()
usr.execute('CREATE TABLE IF NOT EXISTS users(login TEXT, password TEXT, name TEXT, surname TEXT, post TEXT)')
cur.execute('CREATE TABLE IF NOT EXISTS inventory(date TEXT, admin TEXT, itog TEXT)')
cur.execute('CREATE TABLE IF NOT EXISTS admin_bar(date TEXT, admin TEXT, position TEXT, value FLOAT, cost FLOAT)')
cur.execute('CREATE TABLE IF NOT EXISTS admins(name TEXT)')
cur.execute('CREATE TABLE IF NOT EXISTS positions (name TEXT, price FLOAT)')
cur.execute('CREATE TABLE IF NOT EXISTS config (parameter TEXT, value TEXT)')

with open('style.css', 'r') as r:
    style = r.read()

with open ("style.qss", 'r') as st:
            qstyle = st.read()
##########
##Config##
##########
def create_config(path):
    config = configparser.ConfigParser()
    config.add_section("Settings")
    with open (path, 'w') as config_file:
        config.write(config_file)

def add_api(path, api):
    if not os.path.exists(path):
        create_config(path)
    
    config = configparser.ConfigParser()
    config.read(path)
    config.set('Settings', 'API', api)
    with open(path, "w") as config_file:
        config.write(config_file)

def add_password(path, password):
    if not os.path.exists(path):
        create_config(path)
    config = configparser.ConfigParser()
    config.read(path)
    passwrd = hashlib.md5(password.encode())
    passwrd = passwrd.hexdigest()
    config.set('Settings', 'MANAGER_PASSOWRD', passwrd)
    with open(path, "w") as config_file:
        config.write(config_file)

def config_set_discount(path, discount):
    if not os.path.exists(path):
        create_config(path)
    config = configparser.ConfigParser()
    config.read(path)
    config.set('Settings', 'DISCOUNT', discount)
    with open(path, "w") as config_file:
        config.write(config_file)
    
def config_get_value(path, setting):
    if not os.path.exists(path):
        create_config(path)
    config = configparser.ConfigParser()
    config.read(path)
    value = config.get('Settings', setting)
    return value

class Ui_Authorization_window(object):
    def setupUi(self, Authorization):
        Authorization.setObjectName("MainWindow")
        Authorization.setFixedSize(600, 400)
        Authorization.setStyleSheet("")
        Authorization.setWindowFlag(QtCore.Qt.WindowType.FramelessWindowHint)
        self.centralwidget = QtWidgets.QWidget(parent=Authorization)
        
            
        self.centralwidget.setStyleSheet(qstyle)
        self.centralwidget.setObjectName("centralwidget")

        self.etner_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.etner_btn.setGeometry(QtCore.QRect(230, 250, 151, 31))
        self.etner_btn.setStyleSheet(qstyle)
        self.etner_btn.setObjectName("enter_btn")
        self.etner_btn.clicked.connect(self.authorize)

        self.login_field = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.login_field.setGeometry(QtCore.QRect(180, 130, 240, 30))
        self.login_field.setObjectName("login_field")
        self.password_field = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.password_field.setGeometry(QtCore.QRect(180, 190, 240, 30))
        self.password_field.setObjectName("password_field")
        self.password_field.setEchoMode(QLineEdit.EchoMode.Password)
        self.authorize_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.authorize_label.setGeometry(QtCore.QRect(195, 70, 210, 30))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setItalic(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferDefault)
        self.authorize_label.setFont(font)
        self.authorize_label.setObjectName("authorize_label")
        self.close_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.close_btn.setGeometry(QtCore.QRect(10, 360, 89, 25))
        self.close_btn.setObjectName("close_btn")
        self.close_btn.clicked.connect(self.close)
        self.forgot_password_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.forgot_password_label.setGeometry(QtCore.QRect(330, 220, 91, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setUnderline(True)
        self.forgot_password_label.setFont(font)
        self.forgot_password_label.setStyleSheet(qstyle)
        self.forgot_password_label.setObjectName("forgot_password_label")
        Authorization.setCentralWidget(self.centralwidget)

        self.retranslateUi(Authorization)
        QtCore.QMetaObject.connectSlotsByName(Authorization)

    def retranslateUi(self, Authorization):
        _translate = QtCore.QCoreApplication.translate
        Authorization.setWindowTitle(_translate("Authorization", "Авторизация"))
        self.etner_btn.setText(_translate("Authorization", "Вход"))
        self.authorize_label.setText(_translate("Authorization", "Авторизация"))
        self.close_btn.setText(_translate("Authorization", "Выйти"))
        self.forgot_password_label.setText(_translate("Authorization", "Забыли пароль?"))

    def authorize(self):
        login = self.login_field.text()
        login = login.lower()
        password = self.password_field.text()
        if login == '':
            self.etner_btn.setObjectName('error_enter_btn')
            self.etner_btn.setStyleSheet(qstyle)
            self.etner_btn.setText("Введите логин")
            QTimer.singleShot(1200,self.btn_normal)
        elif password == '':
            self.etner_btn.setObjectName('error_enter_btn')
            self.etner_btn.setStyleSheet(qstyle)
            self.etner_btn.setText("Введите пароль")
            QTimer.singleShot(1200,self.btn_normal)
        else:
            usr.execute(f'SELECT * FROM users WHERE login = "{login}"')
            all_users = usr.fetchall()
            try:
                if all_users[0][1] == password:
                    MainWindow.show()
                    authorize_window.close()
                else:
                    self.etner_btn.setText("Неверный пароль")
                    self.etner_btn.setObjectName('error_enter_btn')
                    self.etner_btn.setStyleSheet(qstyle)
                    QTimer.singleShot(1200,self.btn_normal)
            except:
                self.etner_btn.setObjectName('error_enter_btn')
                self.etner_btn.setStyleSheet(qstyle)
                self.etner_btn.setGeometry(QtCore.QRect(205,250,200,30))
                self.etner_btn.setText("Пользователь не найден")
                QTimer.singleShot(1200, self.btn_normal)

    def btn_normal(self):
        self.etner_btn.setText('Вход')
        self.etner_btn.setObjectName('enter_btn')
        self.etner_btn.setStyleSheet(qstyle)
        self.etner_btn.setGeometry(QtCore.QRect(230, 250, 151, 31))
        

    def close(self):
        authorize_window.close()


class Ui_Game_list(object):
    def setupUi(self, Game_list):
        Game_list.setWindowIcon(QtGui.QIcon("icon/colizeum_logo.ico"))
        Game_list.setObjectName("Game_list")
        Game_list.setFixedSize(603, 600)
        self.centralwidget = QtWidgets.QWidget(parent=Game_list)
        self.centralwidget.setObjectName("centralwidget")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(0, 40, 601, 491))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 599, 489))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents_2)
        self.back_label = QtWidgets.QPushButton(parent=self.centralwidget)
        self.back_label.setGeometry(QtCore.QRect(10, 560, 89, 25))
        self.back_label.setObjectName("back_label")
        self.confirm_label = QtWidgets.QPushButton(parent=self.centralwidget)
        self.confirm_label.setGeometry(QtCore.QRect(500, 560, 89, 25))
        self.confirm_label.setObjectName("confirm_label")
        self.saved_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.saved_label.setGeometry(QtCore.QRect(500, 540, 91, 17))
        self.saved_label.setObjectName("saved_label")
        self.pc_num_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.pc_num_label.setGeometry(QtCore.QRect(0, 0, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        self.pc_num_label.setFont(font)
        self.pc_num_label.setObjectName("pc_num_label")
        Game_list.setCentralWidget(self.centralwidget)

        self.retranslateUi(Game_list)
        QtCore.QMetaObject.connectSlotsByName(Game_list)

    def retranslateUi(self, Game_list):
        _translate = QtCore.QCoreApplication.translate
        Game_list.setWindowTitle(_translate("Game_list", "MainWindow"))
        self.back_label.setText(_translate("Game_list", "Назад"))
        self.confirm_label.setText(_translate("Game_list", "Принять"))
        self.saved_label.setText(_translate("Game_list", "Сохранено"))
        self.pc_num_label.setText(_translate("Game_list", "PC00"))



class Ui_Password(object):
    def setupUi(self, Password):
        Password.setStyleSheet("QDialog{background-image: url(background.png);\nbackground-position: absolute;}")
        Password.setObjectName("Password")
        Password.setFixedSize(558, 138)
        Password.setWindowFlag(QtCore.Qt.WindowType.FramelessWindowHint)
        self.ok_box = QtWidgets.QPushButton(parent=Password)
        self.ok_box.setGeometry(QtCore.QRect(460, 100, 81, 25))
        self.ok_box.setObjectName("ok_box")
        self.ok_box.setStyleSheet(style)
        self.ok_box.setText('Ок')
        self.ok_box.clicked.connect(self.ok)
        self.discard_box = QtWidgets.QPushButton(parent=Password)
        self.discard_box.setGeometry(QtCore.QRect(20, 100, 81, 25))
        self.discard_box.setObjectName("discard_box")
        self.discard_box.setText('Отмена')
        self.discard_box.setStyleSheet(style)
        self.discard_box.clicked.connect(self.discard)
        self.textEdit = QtWidgets.QLineEdit(parent=Password)
        self.textEdit.setGeometry(QtCore.QRect(20, 50, 521, 31))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.returnPressed.connect(self.ok)
        self.textEdit.setEchoMode(QLineEdit.EchoMode.Password)
        self.textEdit.setStyleSheet(style)
        self.enter_manager_passowrd_label = QtWidgets.QLabel(parent=Password)
        self.enter_manager_passowrd_label.setGeometry(QtCore.QRect(20, 20, 281, 17))
        self.enter_manager_passowrd_label.setStyleSheet('color:white')
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(True)
        self.enter_manager_passowrd_label.setFont(font)
        self.enter_manager_passowrd_label.setObjectName("enter_manager_passowrd_label")

        self.password_field = QtWidgets.QLabel(parent=Password)
        self.password_field.setGeometry(QtCore.QRect(320, 100, 131, 21))
        self.password_field.setStyleSheet("color: red")
        self.password_field.setObjectName("password_field")
        self.password_field.setVisible(False)

        self.retranslateUi(Password)
        QtCore.QMetaObject.connectSlotsByName(Password)

    def retranslateUi(self, Password):
        _translate = QtCore.QCoreApplication.translate
        Password.setWindowTitle(_translate("Password", "Введите пароль"))
        self.enter_manager_passowrd_label.setText(_translate("Password", "Введите пароль менеджера:"))
        self.password_field.setText(_translate("Password", "Неверный пароль"))

    def ok(self):
        password = self.textEdit.text()
        self.textEdit.clear()
        try:
            true_password = config_get_value(path, 'manager_passowrd')
            password = hashlib.md5(password.encode())
            password = password.hexdigest()
            if password == true_password:
                MainWindow.setEnabled(True)
                MainWindow.close()
                settings_window.show()
                Password_window.close()
            else:
                self.password_field.setVisible(True)
                QTimer.singleShot(4000, self.hide_label)
        except:
            MainWindow.setEnabled(True)
            MainWindow.close()
            Password_window.close()
            settings_window.show()
    def hide_label(self):
        self.password_field.setVisible(False)

    def discard(self):
        MainWindow.setEnabled(True)
        Password_window.close()



class Ui_Settings_second(object):
    def setupUi(self, Settings_second):
        Settings_second.setWindowIcon(QtGui.QIcon("icon/colizeum_logo.ico"))
        Settings_second.setObjectName("Settings_second")
        Settings_second.setFixedSize(742, 880)
        Settings_second.setStyleSheet("QMainWindow{background-image: url(background.png);\nbackground-position: absolute;}")
        self.centralwidget = QtWidgets.QWidget(parent=Settings_second)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet(style)

        ################
        ##Новый пароль##
        ################
        self.short_password_label = QtWidgets.QLabel(self.centralwidget)
        self.short_password_label.setStyleSheet('color: red')
        self.short_password_label.setVisible(True)
        self.short_password_label.setGeometry(QtCore.QRect(170, 35, 340, 31))
        self.short_password_label.setText('Пароль должен быть не менее 6 символов')
        self.short_password_label.setVisible(False)

        self.new_password_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.new_password_label.setGeometry(QtCore.QRect(10, 60, 111, 31))
        self.new_password_label.setObjectName("new_password_label")

        self.new_password_field = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.new_password_field.setGeometry(QtCore.QRect(150, 60, 361, 31))
        self.new_password_field.setObjectName("new_password_field")
        self.new_password_field.returnPressed.connect(self.change_password)

        self.change_password_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.change_password_btn.setGeometry(QtCore.QRect(530, 60, 141, 31))
        self.change_password_btn.setObjectName("change_password_btn")
        self.change_password_btn.clicked.connect(self.change_password)

        self.change_password_green_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.change_password_green_label.setGeometry(QtCore.QRect(530, 40, 101, 20))
        self.change_password_green_label.setObjectName("change_password_green_label")
        self.change_password_green_label.setStyleSheet('color: green')
        self.change_password_green_label.setVisible(False)



        self.Bar_admin_big_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.Bar_admin_big_label.setGeometry(QtCore.QRect(10, 110, 341, 51))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.Bar_admin_big_label.setFont(font)
        self.Bar_admin_big_label.setObjectName("Bar_admin_big_label")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.label_4.setGeometry(QtCore.QRect(10,172,151,21))
        self.spinBox = QtWidgets.QSpinBox(parent=self.centralwidget)
        self.spinBox.setMaximum(100)
        self.spinBox.setObjectName("spinBox")
        self.spinBox.setGeometry(QtCore.QRect(170,170,81,26))
        try:
            discount = config_get_value(path, "discount")
            self.spinBox.setValue(int(discount))
        except:
            pass
        self.set_discount_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.set_discount_btn.setObjectName("pushButton_2")
        self.set_discount_btn.clicked.connect(self.set_discount)
        self.set_discount_btn.setGeometry(QtCore.QRect(260,170,190,25))

        self.Change_password_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.Change_password_label.setGeometry(QtCore.QRect(10, 20, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.Change_password_label.setFont(font)
        self.Change_password_label.setObjectName("Change_password_label")
        self.position_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.position_label.setGeometry(QtCore.QRect(10, 220, 131, 21))
        self.position_label.setObjectName("position_label")

        self.all_position_list = QtWidgets.QListWidget(parent=self.centralwidget)
        self.all_position_list.setGeometry(QtCore.QRect(10, 250, 511, 201))
        self.all_position_list.setObjectName("all_position_list")
        cur.execute('SELECT * FROM admin_bar')
        result = cur.fetchall()
        for item in result:
            self.all_position_list.addItem(f'{item[0]} | {item[1]} | {item[2]} - {int(item[3])}')
        self.all_position_list.clicked.connect(self.selected_from_all_list)

        self.search_admin_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.search_admin_label.setGeometry(QtCore.QRect(10, 470, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.search_admin_label.setFont(font)
        self.search_admin_label.setObjectName("search_admin_label")
        self.admin_name_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.admin_name_label.setGeometry(QtCore.QRect(15, 510, 101, 21))
        self.admin_name_label.setObjectName("admin_name_label")
        self.admin_name_combo_box = QtWidgets.QComboBox(parent=self.centralwidget)
        self.admin_name_combo_box.setGeometry(QtCore.QRect(110, 510, 120, 25))
        self.admin_name_combo_box.setObjectName("admin_name_combo_box")
        cur.execute('SELECT * FROM admins')
        admins = cur.fetchall()
        for admin in admins:
            self.admin_name_combo_box.addItem(admin[0])
        self.confirm_admin_btn = QtWidgets.QPushButton(self.centralwidget)
        self.confirm_admin_btn.setStyleSheet(style)
        self.confirm_admin_btn.setGeometry(QtCore.QRect(240, 510, 100, 25))
        self.confirm_admin_btn.setText('Подтвердить')
        self.confirm_admin_btn.clicked.connect(self.search_by_admin)

        ###################################
        ##Лист с поизициями одного админа##
        ###################################
        self.admin_positions_list = QtWidgets.QListWidget(parent=self.centralwidget)
        self.admin_positions_list.setGeometry(QtCore.QRect(10, 540, 341, 251))
        self.admin_positions_list.setObjectName("admin_positions_list")
        self.admin_positions_list.clicked.connect(self.selected_by_admin_list)

        self.summ_bar_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.summ_bar_label.setGeometry(QtCore.QRect(360, 550, 151, 17))
        self.summ_bar_label.setObjectName("summ_bar_label")
        self.label_bar_admin = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_bar_admin.setGeometry(QtCore.QRect(640, 550, 71, 16))
        self.label_bar_admin.setObjectName("label_bar_admin")
        self.summ_with_sale_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.summ_with_sale_label.setGeometry(QtCore.QRect(360, 580, 151, 17))
        self.summ_with_sale_label.setObjectName("summ_with_sale_label")
        self.label_bar_sale = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_bar_sale.setGeometry(QtCore.QRect(640, 580, 81, 17))
        self.label_bar_sale.setObjectName("label_bar_sale")

        self.delete_all_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.delete_all_btn.setGeometry(QtCore.QRect(530, 260, 191, 41))
        self.delete_all_btn.setObjectName("delete_all_btn")
        self.delete_all_btn.clicked.connect(self.delete_all)
        self.delete_all_btn.setStyleSheet(style)

        ##############################################
        ##Удаление одной позиции из списка по админу##
        ##############################################
        self.delete_tovar_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.delete_tovar_btn.setGeometry(QtCore.QRect(550, 660, 121, 31))
        self.delete_tovar_btn.setObjectName("delete_tovar_btn")
        self.delete_tovar_btn.setStyleSheet("QPushButton{background-color: rgb(35, 35, 35);\n"
"color: rgb(192, 28, 40);}\
    QPushButton::hover{\
    background-color: rgb(63,63,63)\
    }")
        self.delete_tovar_btn.setVisible(False)
        self.delete_tovar_btn.clicked.connect(self.delete_one_from_by_admin_list)

        ##############################################
        ##Выбранная позиция по списку администратора##
        ##############################################
        self.tovar_name_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.tovar_name_label.setGeometry(QtCore.QRect(360, 630, 181, 81))
        self.tovar_name_label.setObjectName("tovar_name_label")
        self.tovar_name_label.setVisible(False)

        self.delete_all_from_admin_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.delete_all_from_admin_btn.setGeometry(QtCore.QRect(370, 754, 311, 31))
        self.delete_all_from_admin_btn.setObjectName("delete_all_from_admin_btn")
        self.delete_all_from_admin_btn.clicked.connect(self.delete_by_admin_all)
        
        ################################################
        ##Название выделенной позиции из общего списка##
        ################################################
        self.position_from_all_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.position_from_all_label.setGeometry(QtCore.QRect(530, 306, 141, 100))
        self.position_from_all_label.setObjectName("position_from_all_label")
        self.position_from_all_label.setVisible(False)

        ############################################
        ##Кнопка удаления позиции из общего списка##
        ############################################
        self.delete_from_all_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.delete_from_all_btn.setGeometry(QtCore.QRect(530, 420, 200, 25))
        self.delete_from_all_btn.setObjectName("delete_from_all_btn")
        self.delete_from_all_btn.setStyleSheet("QPushButton{background-color: rgb(35, 35, 35);\n"
"color: rgb(192, 28, 40);}\
    QPushButton::hover{\
    background-color: rgb(63,63,63)\
    }")
        self.delete_from_all_btn.setVisible(False)
        self.delete_from_all_btn.clicked.connect(self.delete_one_from_all_list)

        ################
        ##Кнопка назад##
        ################
        self.back_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.back_btn.setGeometry(QtCore.QRect(10, 820, 101, 31))
        self.back_btn.setObjectName("back_btn")
        self.back_btn.clicked.connect(self.back)
        Settings_second.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(parent=Settings_second)
        self.statusbar.setObjectName("statusbar")
        Settings_second.setStatusBar(self.statusbar)

        self.retranslateUi(Settings_second)
        QtCore.QMetaObject.connectSlotsByName(Settings_second)

    def retranslateUi(self, Settings_second):
        _translate = QtCore.QCoreApplication.translate
        Settings_second.setWindowTitle(_translate("Settings_second", "Настройки"))
        self.new_password_label.setText(_translate("Settings_second", "Новый пароль:"))
        self.change_password_btn.setText(_translate("Settings_second", "Изменить"))
        self.change_password_green_label.setText(_translate("Settings_second", "Успешно"))
        self.Bar_admin_big_label.setText(_translate("Settings_second", "Бар администратор:"))
        self.label_4.setText(_translate("Settings_second", "Размер скидки ( в %):"))
        self.set_discount_btn.setText(_translate("Settings_second", "Применить"))
        self.Change_password_label.setText(_translate("Settings_second", "Сменить пароль:"))
        self.position_label.setText(_translate("Settings_second", "Взятые позиции:"))
        self.search_admin_label.setText(_translate("Settings_second", "Поиск по админу:"))
        self.admin_name_label.setText(_translate("Settings_second", "Имя админа:"))
        self.summ_bar_label.setText(_translate("Settings_second", "Сумма взятого бара:"))
        self.label_bar_admin.setText(_translate("Settings_second", "0 ₽"))
        self.summ_with_sale_label.setText(_translate("Settings_second", "Сумма со скидкой:"))
        self.label_bar_sale.setText(_translate("Settings_second", "0 ₽"))
        self.delete_all_btn.setText(_translate("Settings_second", "Стереть все записи"))
        self.delete_tovar_btn.setText(_translate("Settings_second", "Стереть запись"))
        self.tovar_name_label.setText(_translate("Settings_second", "Товар"))
        self.delete_all_from_admin_btn.setText(_translate("Settings_second", "Стереть все записи по админу"))
        self.position_from_all_label.setText(_translate("Settings_second", "Запись"))
        self.delete_from_all_btn.setText(_translate("Settings_second", "Стереть"))
        self.back_btn.setText(_translate("Settings_second", "Назад"))


    def change_password(self):
        new_pass = self.new_password_field.text()
        if new_pass.__len__() < 6:
            self.short_password_label.setVisible(True)
            QTimer.singleShot(5000, self.hide_short_passord_label)
        else:
            self.new_password_field.clear()
            add_password(path, new_pass)

    def hide_short_passord_label(self):
        self.short_password_label.setVisible(False)

    def set_discount(self):
        value = self.spinBox.value()
        config_set_discount(path, str(value))

    def search_by_admin(self):
        try:
            self.admin_positions_list.clear()
        except:
            pass
        admin_name = self.admin_name_combo_box.currentText()
        cur.execute(f'SELECT * FROM admin_bar WHERE admin = "{admin_name}"')
        results = cur.fetchall()
        summ = 0
        for result in results:
            summ = summ + (result[4] * result[3])
            self.admin_positions_list.addItem(f'{result[0]} | {result[1]} | {int(result[3])} - {result[2]}')
        self.label_bar_admin.setText(f'{int(summ)} ₽')
        discount = int(config_get_value(path, 'discount'))
        discount = summ / 100 * (100-discount)
        self.label_bar_sale.setText(f'{int(discount)} ₽')

    def selected_from_all_list(self):
        self.delete_from_all_btn.setVisible(True)
        item = self.all_position_list.currentItem()
        text = item.text().split(' | ')
        self.position_from_all_label.setVisible(True)
        self.position_from_all_label.setText(f'{text[0]}\n{text[1]}\n{text[2]} шт.')

    def delete_all(self):
        i = 0
        count = self.all_position_list.count()
        while i < count:
            self.all_position_list.takeItem(0)
            i = i + 1 
        cur.execute('DELETE FROM admin_bar')
        conn.commit()

    def delete_one_from_all_list(self):
        item = self.all_position_list.currentItem()
        index = self.all_position_list.currentIndex().row()
        item = item.text()
        data = item.split(' | ')
        date, admin = data[0], data[1]
        data = data[2].split(' - ')
        position, count = data[0], data[1]
        cur.execute(f'DELETE FROM admin_bar WHERE date = "{date}" AND admin = "{admin}" AND position = "{position}" AND value = "{count}"')
        conn.commit()
        self.all_position_list.takeItem(index)
        self.delete_from_all_btn.setVisible(False)
        self.position_from_all_label.setVisible(False)
        

    def selected_by_admin_list(self):
        item = self.admin_positions_list.currentItem()
        text = item.text().split(' | ')
        self.tovar_name_label.setVisible(True)
        self.delete_tovar_btn.setVisible(True)
        self.tovar_name_label.setText(f'{text[0]}\n{text[1]}\n{text[2]}')

    def delete_one_from_by_admin_list(self):
        admin = self.admin_name_combo_box.currentText()
        item = self.admin_positions_list.currentItem()
        index = self.admin_positions_list.currentIndex().row()
        data = item.text().split(' | ')
        data_1 = data[2].split(' - ')
        date, position, value = data[0], data_1[1], data_1[0]
        cur.execute(f'DELETE FROM admin_bar WHERE admin = "{admin}" AND date = "{date}" AND position = "{position}" AND value = "{value}"')
        conn.commit()
        self.tovar_name_label.setVisible(False)
        self.delete_tovar_btn.setVisible(False)
        self.admin_positions_list.takeItem(index)
        cur.execute(f'SELECT * FROM admin_bar WHERE admin = "{admin}"')
        results = cur.fetchall()
        summ = 0
        for result in results:
            summ = summ + result[4]
        self.label_bar_admin.setText(f'{int(summ)} ₽')
        discount = config_get_value(path, 'discount')
        summ_with_discount = int(summ) /100 * (100 - int(discount))
        self.label_bar_sale.setText(f'{int(summ_with_discount)} ₽')

    def delete_by_admin_all(self):
        admin = self.admin_name_combo_box.currentText()
        cur.execute(f'DELETE FROM admin_bar WHERE admin = "{admin}"')
        conn.commit()
        self.admin_positions_list.clear()
        self.tovar_name_label.setVisible(False)
        self.delete_tovar_btn.setVisible(False)
        self.label_bar_sale.setText('0 ₽')
        self.label_bar_admin.setText('0 ₽')

    def back (self):
        second_settings_window.hide()
        settings_window.show()
        

class Ui_settings(object):
    def setupUi(self, settings):
        settings.setWindowIcon(QtGui.QIcon("icon/colizeum_logo.ico"))
        settings.setObjectName("settings")
        settings.setFixedSize(850, 900)
        settings.setStyleSheet("QMainWindow{background-image: url(background.png);\nbackground-position: absolute;}")
        self.centralwidget = QtWidgets.QWidget(parent=settings)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet(style)
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 50, 491, 211))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        ##################
        ##Список админов##
        ##################
        self.List_admins_widget = QtWidgets.QListWidget(parent=self.verticalLayoutWidget)
        self.List_admins_widget.setObjectName("List_admins_widget")
        self.List_admins_widget.clicked.connect(self.admin_name_clicked)
        self.verticalLayout.addWidget(self.List_admins_widget)
        cur.execute('SELECT * FROM admins')
        admins = cur.fetchall()
        for admin in admins:
            self.List_admins_widget.addItem(admin[0])

        ########################
        ##Выбранное имя админа##
        ########################
        self.list_admins_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.list_admins_label.setGeometry(QtCore.QRect(20, 20, 281, 17))
        self.list_admins_label.setObjectName("list_admins_label")


        ######################
        ##Текст ошибка админ##
        ######################
        self.error_admin_label =QtWidgets.QLabel(parent=self.centralwidget)
        self.error_admin_label.setVisible(False)
        self.error_admin_label.setGeometry(750,90,61,31)
        self.error_admin_label.setText('Ошибка')
        self.error_admin_label.setStyleSheet("color: rgb(192, 28, 40);")

        ########################
        ##Текст ошибка позиция##
        ########################
        self.error_position_label =QtWidgets.QLabel(parent=self.centralwidget)
        self.error_position_label.setVisible(False)
        self.error_position_label.setGeometry(670,450,61,21)
        self.error_position_label.setText('Ошибка')
        self.error_position_label.setStyleSheet("color: rgb(192, 28, 40);")

        self.name_admin_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.name_admin_label.setVisible(False)
        self.name_admin_label.setObjectName("name_admin_label")
        self.name_admin_label.setGeometry(QtCore.QRect(20,270,157,21))
        self.del_admin_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.del_admin_btn.setVisible(False)
        self.del_admin_btn.setStyleSheet("QPushButton{background-color: rgb(35, 35, 35);\n"
"color: rgb(192, 28, 40);}\
    QPushButton::hover{\
    background-color: rgb(63,63,63)\
    }")
        self.del_admin_btn.setObjectName("del_admin_btn")
        self.del_admin_btn.clicked.connect(self.admin_del)
        self.del_admin_btn.setGeometry(QtCore.QRect(180,270,156,25))

        self.add_admin_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.add_admin_label.setGeometry(QtCore.QRect(530, 20, 171, 17))
        self.add_admin_label.setObjectName("add_admin_label")

        self.Name_add_admin = QtWidgets.QLabel(self.centralwidget)
        self.Name_add_admin.setObjectName("Name_add_admin")
        self.Name_add_admin.setGeometry(QtCore.QRect(520,50,34,31))
        self.add_admin_text_field = QtWidgets.QLineEdit(self.centralwidget)
        self.add_admin_text_field.setObjectName("add_admin_text_field")
        self.add_admin_text_field.setGeometry(QtCore.QRect(570, 50, 181, 31))
        self.add_admin_text_field.returnPressed.connect(self.add_admin)

        self.add_admin_btn = QtWidgets.QPushButton(self.centralwidget)
        self.add_admin_btn.setEnabled(False)
        self.add_admin_btn.setStyleSheet("QPushButton{background-color: rgb(35, 35, 35);\n"
"color: rgb(69, 186, 4);}\
    QPushButton::hover{\
    background-color: rgb(63,63,63)\
    }")
        self.add_admin_btn.setGeometry(QtCore.QRect(760,50,81,31))
        self.add_admin_btn.setObjectName("add_admin_btn")
        self.add_admin_btn.clicked.connect(self.add_admin)

        self.add_admin_text_field.textChanged.connect(self.activate_add_admin)        #Активируем кнопку
        self.item_list = QtWidgets.QLabel(parent=self.centralwidget)
        self.item_list.setGeometry(QtCore.QRect(20, 330, 251, 17))
        self.item_list.setObjectName("item_list")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(20, 360, 491, 411))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        ###########################
        ##Список с позициями бара##
        ###########################
        self.list_item_widget = QtWidgets.QListWidget(parent=self.verticalLayoutWidget_2)
        self.list_item_widget.setObjectName("list_item_widget")
        self.verticalLayout_2.addWidget(self.list_item_widget)
        self.list_item_widget.clicked.connect(self.item_clicked)
        cur.execute('SELECT * FROM positions')
        self.items = cur.fetchall()
        for item in self.items:
            self.list_item_widget.addItem(f'{item[0]} | {item[1]}')


        ##################################
        ##Наименование выбранной позиции##
        ##################################
        self.name_item_label = QtWidgets.QLabel(self.centralwidget)
        self.name_item_label.setVisible(False)
        self.name_item_label.setObjectName("name_item_label")
        self.name_item_label.setGeometry(QtCore.QRect(520, 480, 220, 40))
        ###########################
        ##Кнопка удаления позиции##
        ###########################
        self.delete_item_btn = QtWidgets.QPushButton(self.centralwidget)
        self.delete_item_btn.setVisible(False)
        self.delete_item_btn.setStyleSheet("QPushButton{background-color: rgb(35, 35, 35);\n"
"color: rgb(192, 28, 40);}\
    QPushButton::hover{\
    background-color: rgb(63,63,63)\
    }")
        self.delete_item_btn.setGeometry(QtCore.QRect(740, 490, 80, 25))
        self.delete_item_btn.setObjectName("delete_item_btn")
        self.delete_item_btn.clicked.connect(self.del_item)

        self.gridLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(530, 360, 291, 71))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.item_name_label = QtWidgets.QLabel(parent=self.gridLayoutWidget)
        self.item_name_label.setObjectName("item_name_label")
        self.gridLayout.addWidget(self.item_name_label, 0, 0, 1, 1)
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(parent=self.gridLayoutWidget)
        self.doubleSpinBox.setMaximum(99999999.0)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.gridLayout.addWidget(self.doubleSpinBox, 1, 1, 1, 1)
        self.Item_name_field = QtWidgets.QLineEdit(parent=self.gridLayoutWidget)
        self.Item_name_field.setObjectName("Item_name_field")
        self.Item_name_field.textChanged.connect(self.activate_add_item)      #Активируем кнопку
        self.gridLayout.addWidget(self.Item_name_field, 0, 1, 1, 1)

        ###Стоимость позиции
        self.item_cost_label = QtWidgets.QLabel(parent=self.gridLayoutWidget)
        self.item_cost_label.setObjectName("item_cost_label")
        self.gridLayout.addWidget(self.item_cost_label, 1, 0, 1, 1)

        ###Кнопка добавить позицию бара
        self.add_item_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.add_item_btn.setEnabled(False)
        self.add_item_btn.setGeometry(QtCore.QRect(740, 450, 80, 25))
        self.add_item_btn.setStyleSheet("QPushButton{background-color: rgb(35, 35, 35);\n"
"color: rgb(69, 186, 4);}\
    QPushButton::hover{\
    background-color: rgb(63,63,63)\
    }")
        self.add_item_btn.setObjectName("add_item_btn")
        self.add_item_btn.clicked.connect(self.add_item)

        ##Кнопка назад
        self.to_menu_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.to_menu_btn.setGeometry(QtCore.QRect(20, 840, 121, 25))
        self.to_menu_btn.setObjectName("to_menu_btn")
        self.to_menu_btn.setStyleSheet(style)
        self.to_menu_btn.clicked.connect(self.to_menu)


        self.api_label = QtWidgets.QLabel(self.centralwidget)
        self.api_label.setGeometry(QtCore.QRect(40, 780, 160,25))
        self.api_label.setText('Введите API ключ: ')

        self.api_label.setStyleSheet(style)
        self.api_field = QtWidgets.QLineEdit(self.centralwidget)
        self.api_field.setGeometry(QtCore.QRect(200,780, 480,30))
        self.api_field.setStyleSheet('font-size: 13px')
        try:
            self.api_field.setText(config_get_value(path, 'api'))
        except:
            pass
        
        self.api_field.returnPressed.connect(self.set_api)
        self.api_btn = QtWidgets.QPushButton(self.centralwidget)
        self.api_btn.setGeometry(QtCore.QRect(720,780,100,25))
        self.api_btn.setText('Сохранить')
        self.api_btn.clicked.connect(self.set_api)

        self.saved_api_label = QtWidgets.QLabel(self.centralwidget)
        self.saved_api_label.setGeometry(QtCore.QRect(720,760,100,25))
        self.saved_api_label.setStyleSheet('color: green')
        self.saved_api_label.setText('Сохранено')
        self.saved_api_label.setVisible(False)

        self.next_setting_page = QtWidgets.QPushButton(self.centralwidget)
        self.next_setting_page.setGeometry(QtCore.QRect(720,840,100,25))
        self.next_setting_page.setText('Далее')
        self.next_setting_page.clicked.connect(self.next_window)


        settings.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=settings)
        self.statusbar.setObjectName("statusbar")
        settings.setStatusBar(self.statusbar)

        self.retranslateUi(settings)
        QtCore.QMetaObject.connectSlotsByName(settings)

    def retranslateUi(self, settings):
        _translate = QtCore.QCoreApplication.translate
        settings.setWindowTitle(_translate("settings", "Настройки"))
        self.list_admins_label.setText(_translate("settings", "Выберите админа из списка"))
        self.name_admin_label.setText(_translate("settings", "Имя"))
        self.del_admin_btn.setText(_translate("settings", "Удалить"))
        self.add_admin_label.setText(_translate("settings", "Добавить админа"))
        self.Name_add_admin.setText(_translate("settings", "Имя:"))
        self.add_admin_btn.setText(_translate("settings", "Добавить"))
        self.item_list.setText(_translate("settings", "Выберите товар из списка"))
        self.name_item_label.setText(_translate("settings", "Позиция"))
        self.delete_item_btn.setText(_translate("settings", "Удалить"))
        self.item_name_label.setText(_translate("settings", "Наименование"))
        self.item_cost_label.setText(_translate("settings", "Цена"))
        self.add_item_btn.setText(_translate("settings", "Добавить"))
        self.to_menu_btn.setText(_translate("settings", "Назад"))

    #####################
    ##Активаторы кнопок##
    #####################
    def activate_add_admin(self):
        self.add_admin_btn.setEnabled(True)

    def activate_add_item(self):
        self.add_item_btn.setEnabled(True)

    def activate_api(self):
        self.api_btn.setEnabled(True)
        self.api_btn.setStyleSheet(style)
        self.saved_api_label.setVisible(False)


    ######################################
    ##Добавление/удаление администратора##
    ######################################
    def add_admin(self):
        self.admin_name = self.add_admin_text_field.text()
        if self.admin_name == '':
            self.error_admin_label.setVisible(True)
        elif self.admin_name == ' ':
            self.error_admin_label.setVisible(True)     
        else:
            cur.execute(f'INSERT INTO admins VALUES("{self.admin_name}")')
            conn.commit()
            self.List_admins_widget.addItem(self.admin_name)
            self.error_admin_label.setVisible(False)
        self.add_admin_text_field.clear()



    def admin_name_clicked(self):
        self.name_admin_label.setVisible(True)
        self.del_admin_btn.setVisible(True)
        name = self.List_admins_widget.currentItem()
        self.name_admin_label.setText(str(name.text()))

    def admin_del(self):
        name = self.List_admins_widget.currentItem()                               #Получаем выбраннй элемент
        el = self.List_admins_widget.indexFromItem(name).row()                     #Получаем его номер
        cur.execute(f'DELETE FROM admins WHERE name LIKE "{str(name.text())}"')    #Закидываем имя в бд
        conn.commit()
        self.List_admins_widget.takeItem(el)                                       #Удаляем из списка
        self.del_admin_btn.setVisible(False)                                       #Офаем кнопку и имя
        self.name_admin_label.setVisible(False)



    def add_item(self):
        item_name = self.Item_name_field.text()
        item_cost = self.doubleSpinBox.value()
        if item_cost == 0:
            self.error_position_label.setVisible(True)
        elif item_name == '' or item_name == ' ':
            self.error_position_label.setVisible(True)
        else:
            cur.execute(f'INSERT INTO positions VALUES("{item_name}", "{item_cost}")')
            conn.commit()
            self.error_position_label.setVisible(False)
            self.list_item_widget.addItem(f'{item_name} | {item_cost}')
        self.Item_name_field.clear()
        self.doubleSpinBox.setValue(0)


    def item_clicked(self):
        item = self.list_item_widget.currentItem()
        self.name_item_label.setText(str(item.text()))
        self.delete_item_btn.setVisible(True)
        self.name_item_label.setVisible(True)

    def del_item(self):
        item = self.list_item_widget.currentItem()
        item_position = self.list_item_widget.indexFromItem(item).row()
        name = str(item.text()).split(" |")[0]
        cur.execute(f'DELETE FROM positions WHERE name = "{name}"')
        conn.commit()
        self.list_item_widget.takeItem(item_position)
        self.delete_item_btn.setVisible(False)
        self.name_item_label.setVisible(False)

    def set_api(self):
        self.saved_api_label.setVisible(True)
        self.api_btn.setStyleSheet('background: gray;\ncolor: white')
        self.api_btn.setEnabled(False)
        QTimer.singleShot(1500, self.activate_api)
        key = self.api_field.text()
        add_api(path, key)

    def next_window(self):
        settings_window.hide()
        second_settings_window.show()

    def to_menu(self):
        settings_window.hide()
        MainWindow.show()



class Ui_Inv_history(object):
    def setupUi(self, Inv_history):
        Inv_history.setObjectName("Inv_history")
        Inv_history.setFixedSize(400, 800)
        Inv_history.setStyleSheet("QMainWindow{background-image: url(background.png);\nbackground-position: absolute;}")
        self.centralwidget = QtWidgets.QWidget(parent=Inv_history)
        self.centralwidget.setObjectName("centralwidget")
        self.back = QtWidgets.QPushButton(parent=self.centralwidget)
        self.back.setGeometry(QtCore.QRect(20, 750, 111, 25))
        self.back.setObjectName("back")
        self.back.clicked.connect(self.to_menu)
        self.back.setStyleSheet(style)
        self.textBrowser = QtWidgets.QTextBrowser(parent=self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(20, 20, 350, 711))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setStyleSheet("background-color: black;\ncolor: white;")
        cur.execute('SELECT * FROM inventory')
        result = cur.fetchall()
        l = 0
        for i in result:
            self.textBrowser.insertPlainText(f'{result[l][0]} - {result[l][1]}\n\n{result[l][2]}\n\n')
            l = l+1
        Inv_history.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=Inv_history)
        self.statusbar.setObjectName("statusbar")
        Inv_history.setStatusBar(self.statusbar)

        self.retranslateUi(Inv_history)
        QtCore.QMetaObject.connectSlotsByName(Inv_history)

    def retranslateUi(self, Inv_history):
        _translate = QtCore.QCoreApplication.translate
        Inv_history.setWindowTitle(_translate("Inv_history", "История инвентаризаций"))
        self.back.setText(_translate("Inv_history", "Назад"))

    def to_menu(self):
        inv_history.hide()
        MainWindow.show()

class Ui_Bar(object):
    def setupUi(self, Bar):
        Bar.setWindowIcon(QtGui.QIcon("icon/colizeum_logo.ico"))
        Bar.setObjectName("Bar")
        Bar.setFixedSize(416, 751)
        Bar.setStyleSheet("QMainWindow{background-image: url(background.png);\nbackground-position: absolute;}")
        self.centralwidget = QtWidgets.QWidget(parent=Bar)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet(style)
        self.send = QtWidgets.QPushButton(parent=self.centralwidget)
        self.send.setGeometry(QtCore.QRect(290, 680, 89, 25))
        self.send.setObjectName("send")
        self.send.setStyleSheet(style)
        self.send.clicked.connect(self.get_result)
        self.back = QtWidgets.QPushButton(parent=self.centralwidget)
        self.back.setGeometry(QtCore.QRect(20, 680, 89, 25))
        self.back.setObjectName("back")
        self.back.setStyleSheet(style)
        self.back.clicked.connect(self.go_back)

        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setObjectName("label")
        self.label.setGeometry(QtCore.QRect(20,30,101,21))
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setCurrentText("")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.setGeometry(QtCore.QRect(120,30,271,25))
        self.sended_label = QtWidgets.QLabel(self.centralwidget)
        self.sended_label.setGeometry(QtCore.QRect(290, 655, 90,20))
        self.sended_label.setText('Отправлено')
        self.sended_label.setStyleSheet('color: green')
        self.sended_label.setVisible(False)
        cur.execute('SELECT * FROM admins')
        admins = cur.fetchall()
        for admin in admins:
            self.comboBox.addItem(admin[0])
        self.scrollArea = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(20, 60, 371, 591))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 369, 589))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollAreaWidgetContents.setStyleSheet('background-color: black;\ncolor: white;')
        self.grid = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        cur.execute('SELECT * FROM positions')
        result = cur.fetchall()
        s = 0
        for i in result:
            object_0 = QtWidgets.QLabel(f'{i[0]}')
            object_0.setStyleSheet('color: white;')
            object_1 = QtWidgets.QDoubleSpinBox()
            object_1.setMaximum(99999)
            object_1.setStyleSheet(style)
            self.grid.addWidget(object_0,s,0)
            self.grid.addWidget(object_1, s, 1)
            s = s + 1
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        Bar.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=Bar)
        self.statusbar.setObjectName("statusbar")
        Bar.setStatusBar(self.statusbar)

        self.retranslateUi(Bar)
        QtCore.QMetaObject.connectSlotsByName(Bar)

    def retranslateUi(self, Bar):
        _translate = QtCore.QCoreApplication.translate
        Bar.setWindowTitle(_translate("Bar", "Бар админ"))
        self.send.setText(_translate("Bar", "Отправить"))
        self.back.setText(_translate("Bar", "Назад"))
        self.label.setText(_translate("Bar", "Имя админа"))


    def get_result(self):
        self.sended_label.setVisible(True)
        self.send.setDisabled(True)
        self.send.setStyleSheet('color: white;\nbackground: gray;')
        QTimer.singleShot(1500, self.end_send)
        admin_name = self.comboBox.currentText()
        i = 0
        while i < self.grid.rowCount():
            name = self.grid.itemAtPosition(i, 0)
            name = name.widget().text()
            count = self.grid.itemAtPosition(i, 1)
            count = count.widget().value()
            today = datetime.datetime.now().strftime('%d.%m.%Y %H:%M.%S')
            if count > 0:
                cur.execute(f'SELECT * FROM positions WHERE name = "{str(name)}"')
                res = cur.fetchall()
                cur.execute(f'INSERT INTO admin_bar VALUES("{today}", "{admin_name}", "{name}", "{count}", "{res[0][1]}")')
                conn.commit()
            i = i +1

    def end_send(self):
        self.sended_label.setVisible(False)
        self.send.setStyleSheet(style)
        self.send.setDisabled(False)

    def go_back(self):
        window_bar.close() 
        MainWindow.show()


class Inventory(object):
    def setupUi(self, MainWindow):
        MainWindow.setWindowIcon(QtGui.QIcon("icon/colizeum_logo.ico"))
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.setFixedSize(616, 797)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("QMainWindow{background-image: url(background.png);\nbackground-position: absolute;}")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setStyleSheet(style)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 720, 89, 25))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet(style)
        self.pushButton.clicked.connect(self.go_back)
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(490, 720, 89, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setStyleSheet(style)
        self.pushButton_2.clicked.connect(self.get_result)
        self.in_prog_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.in_prog_label.setGeometry(QtCore.QRect(20, 30, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.in_prog_label.setFont(font)
        self.in_prog_label.setObjectName("in_prog_label")
        self.at_club_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.at_club_label.setGeometry(QtCore.QRect(340, 20, 131, 41))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.at_club_label.setFont(font)
        self.at_club_label.setObjectName("at_club_label")
        self.label_name_admin = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_name_admin.setGeometry(QtCore.QRect(20, 650, 161, 31))
        self.label_name_admin.setObjectName("label_name_admin")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(20, 70, 250, 540))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.content_widget = QtWidgets.QWidget()
        self.content_widget.setGeometry(QtCore.QRect(0, 0, 248, 538))
        self.content_widget.setObjectName("content_widget")
        self.content_widget.setStyleSheet("background-color: rgb(45,45,45);\ncolor: white;\nborder-color: rgb(245, 232, 50);")
        self.grid = QtWidgets.QGridLayout(self.content_widget)
        self.label_1 = QtWidgets.QLabel('Label')
        cur.execute('SELECT * FROM positions')
        result = cur.fetchall()
        self.dic = {}
        s = 0
        for i in result:
            self.dic[str(i)] = QtWidgets.QLabel(f'{i[0]}')
            object_1 = QtWidgets.QDoubleSpinBox()
            object_1.setStyleSheet(style)
            object_1.setMaximum(99999)
            self.grid.addWidget(self.dic[str(i)], s, 0)
            self.grid.addWidget(object_1, s, 1)
            s = s+1
        self.scrollArea.setWidget(self.content_widget)
        self.scrollArea_2 = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea_2.setGeometry(QtCore.QRect(340, 70, 250, 540))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.content_widget_1 = QtWidgets.QWidget()
        self.content_widget_1.setGeometry(QtCore.QRect(0, 0, 248, 538))
        self.content_widget_1.setObjectName("content_widget_1")
        self.content_widget_1.setStyleSheet("background-color: rgb(45,45,45);\ncolor: white;")
        self.grid_1 = QtWidgets.QGridLayout(self.content_widget_1)
        self.send_label = QtWidgets.QLabel(self.centralwidget)
        self.send_label.setGeometry(QtCore.QRect(490,690,90,20))
        self.send_label.setStyleSheet('color: green;')
        self.send_label.setObjectName('send_label')
        self.send_label.setVisible(False)
        s = 0
        for i in result:
            object_0 = QtWidgets.QLabel(f'{i[0]}')
            object_1 = QtWidgets.QDoubleSpinBox()
            object_0.setStyleSheet(style)
            object_1.setStyleSheet(style)
            object_1.setMaximum(99999)
            self.grid_1.addWidget(object_0, s, 0)
            self.grid_1.addWidget(object_1, s, 1)
            s = s+1
        self.scrollArea_2.setWidget(self.content_widget_1)
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(190, 650, 201, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.setStyleSheet(style)
        cur.execute('SELECT * FROM admins')
        admins = cur.fetchall()
        for admin in admins:
            self.comboBox.addItem(admin[0])
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Инвентаризация"))
        self.send_label.setText(_translate('MainWindow', "Отправлено"))
        self.pushButton.setText(_translate("MainWindow", "Назад"))
        self.pushButton_2.setText(_translate("MainWindow", "Отправить"))
        self.in_prog_label.setText(_translate("MainWindow", "В проге"))
        self.at_club_label.setText(_translate("MainWindow", "На складе"))
        self.label_name_admin.setText(_translate("MainWindow", "Имя администратора:"))

    def get_result(self):
        admin_name = self.comboBox.currentText()


        i = 0
        today = datetime.datetime.now()
        date = f'{today.year}-{today.month}-{today.day}'
        self.to_insrt = f'{today.year}-{today.month}-{today.day}\n\n{admin_name}\n\n'
        to_bd = ''
        while i < self.grid.rowCount():
            name = self.grid.itemAtPosition(i,0)
            name = name.widget().text()
            in_program = self.grid.itemAtPosition(i,1)
            in_program = in_program.widget()

            at_club = self.grid_1.itemAtPosition(i,1)
            at_club = at_club.widget()

            itog = at_club.value() - in_program.value()
            i = i +1

            self.to_insrt += f'{name}:   {itog}\n'
            to_bd += f'{name}:   {itog}\n'
        cur.execute(f'INSERT INTO inventory VALUES("{date}", "{admin_name}", "{to_bd}")')
        conn.commit()
        self.send_tg()

    def go_back(self):  #Кнопка назад (на винде криво работает)
        window_inv.hide()
        MainWindow.show()

    def send_tg(self):          #Отправка в телегу
        bot = telebot.TeleBot(config_get_value(path, 'api'))
        self.pushButton_2.setDisabled(True)
        self.send_label.setVisible(True)
        self.pushButton_2.setStyleSheet('background: gray;\ncolor: white;')
        QTimer.singleShot(1500, self.deactivate_btn)
        bot.send_message(412997019, self.to_insrt)

    def deactivate_btn(self):
        self.pushButton_2.setStyleSheet('style')
        self.pushButton_2.setDisabled(False)

class Ui_MainWindow(object):                #Основное окно (меню)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.setFixedSize(600, 800)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("QMainWindow{background-image: url(background.png);\nbackground-position: absolute;}")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(170, 100, 260, 30))
        self.pushButton.setStyleSheet(style)
        self.pushButton.setObjectName("Inventarization")
        self.pushButton.clicked.connect(self.invent)
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(170, 170, 260, 30))
        self.pushButton_2.setStyleSheet(style)
        self.pushButton_2.setObjectName("bar_admin")
        self.pushButton_2.clicked.connect(self.bar_administrator)
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(170, 240, 260, 30))
        self.pushButton_3.setStyleSheet(style)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.history_inv)
        self.exit_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.exit_btn.setGeometry(QtCore.QRect(170, 700, 260, 30))
        self.exit_btn.setStyleSheet(style)
        self.exit_btn.setObjectName("exit_btn")
        self.exit_btn.clicked.connect(self.exit)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

#        self.pc_list_btn = QtWidgets.QPushButton(self.centralwidget)
#        self.pc_list_btn.setText('Обновление игр')
#        self.pc_list_btn.setGeometry(QtCore.QRect(170, 310, 260, 30))
#        self.pc_list_btn.setStyleSheet(style)
#        self.pc_list_btn.clicked.connect(self.pc_list)


        ###################
        ##Кнопка настроек##
        ###################
        self.settings_btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.settings_btn.setGeometry(QtCore.QRect(170, 630, 260, 30))
        self.settings_btn.setStyleSheet(style)
        self.settings_btn.setObjectName("setting_btn")
        self.settings_btn.clicked.connect(self.settings)
        
        #####################################
        ##Кнопка добавления нового аккаунта##
        #####################################
        self.add_user_btn = QtWidgets.QPushButton(self.centralwidget)
        self.add_user_btn.setGeometry(QtCore.QRect(170, 560, 260, 30))
        self.add_user_btn.setStyleSheet(style)
        self.add_user_btn.setText('Добавить аккаунт')


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Colizeum Tool"))
        self.settings_btn.setText(_translate('Mainwindow', "Настройки"))
        self.pushButton.setText(_translate("MainWindow", "Инвентаризация"))
        self.pushButton_2.setText(_translate("MainWindow", "Бар администратор"))
        self.pushButton_3.setText(_translate("MainWindow", "История инвентаризаций"))
        self.exit_btn.setText(_translate("MainWindow", "Выход"))

    def invent(self):
        MainWindow.hide()
        window_inv.show()

    def bar_administrator(self):
        MainWindow.hide()
        window_bar.update()
        window_bar.show()
        
    def history_inv(self):
        MainWindow.hide()
        inv_history.show()

    def settings(self):
        Password_window.show()
        MainWindow.setDisabled(True)
#        MainWindow.close()
#        settings_window.show()

    def pc_list(self):
        MainWindow.show()
#        pc_list_window.show()


    def exit(self):
        MainWindow.close()
        


if __name__ == "__main__":
    import sys
    path = 'settings.ini'
    app = QtWidgets.QApplication(sys.argv)
    

    bar = Ui_Bar()

    ####################
    ##Окно авторизации##
    ####################
    authorize_window = QtWidgets.QMainWindow()
    authorize_window_class = Ui_Authorization_window()
    authorize_window_class.setupUi(authorize_window)

    ########################
    ##Диалог запрос пароля##
    ########################
    Password_window = QtWidgets.QDialog()
    pass_ui = Ui_Password()
    pass_ui.setupUi(Password_window)

    #################
    ##Основное окно##
    #################
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    ##########################
    ##История инвентаризаций##
    ##########################
    inv_history = QtWidgets.QMainWindow()
    inv_hist_ui = Ui_Inv_history()
    inv_hist_ui.setupUi(inv_history)

    #######################
    ##Окно инвентаризации##
    #######################
    window_inv = QtWidgets.QMainWindow()
    inv = Inventory()
    inv.setupUi(window_inv)

    ##########################
    ##Окно бар администратор##
    ##########################
    window_bar = QtWidgets.QMainWindow()
    bar_wndw = Ui_Bar()
    bar_wndw.setupUi(window_bar)

    #################
    ##Окно настроек##
    #################
    settings_window = QtWidgets.QMainWindow()
    stngs_wndw = Ui_settings()
    stngs_wndw.setupUi(settings_window)

    ########################
    ##Второе окно настроек##
    ########################
    second_settings_window = QtWidgets.QMainWindow()
    second_settings_window_class = Ui_Settings_second()
    second_settings_window_class.setupUi(second_settings_window)

#    #############
#    ##Список Пк##
#    #############
#    pc_list_window = QtWidgets.QMainWindow()
#    pc_list_window_class = Ui_game_update()
#    pc_list_window_class.setupUi(pc_list_window)

    #############################
    ##Список игр для обновления##
    #############################
    game_list_window = QtWidgets.QMainWindow()
    game_list_window_class = Ui_Game_list()
    game_list_window_class.setupUi(game_list_window)

    authorize_window.show()
    sys.exit(app.exec())
    bot.polling(none_stop=True, interval=0)


